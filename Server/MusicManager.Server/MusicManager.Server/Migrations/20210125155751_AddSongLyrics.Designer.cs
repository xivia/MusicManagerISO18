// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicManger.Server.Core.Infrastructure;

namespace MusicManager.Server.Migrations
{
    [DbContext(typeof(MusicManagerContext))]
    [Migration("20210125155751_AddSongLyrics")]
    partial class AddSongLyrics
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicManager.Server.Core.Model.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.PasswordResetLink", b =>
                {
                    b.Property<long>("PasswordResetLinkID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("LinkGuid");

                    b.Property<long?>("UserId");

                    b.HasKey("PasswordResetLinkID");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetLinks");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.Playlist", b =>
                {
                    b.Property<long>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long?>("UserId");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.Song", b =>
                {
                    b.Property<long>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverFilePath");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FilePath");

                    b.Property<long?>("GenreId");

                    b.Property<string>("Name");

                    b.Property<long?>("PlaylistId");

                    b.Property<DateTime>("PublishOn");

                    b.Property<long?>("UserId");

                    b.HasKey("SongId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.SongLyrics", b =>
                {
                    b.Property<long>("SongLyricsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lyrics");

                    b.Property<long?>("SongId");

                    b.HasKey("SongLyricsId");

                    b.HasIndex("SongId");

                    b.ToTable("SongLyrics");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Banned");

                    b.Property<string>("EmailAddress");

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.PasswordResetLink", b =>
                {
                    b.HasOne("MusicManager.Server.Core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.Playlist", b =>
                {
                    b.HasOne("MusicManager.Server.Core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.Song", b =>
                {
                    b.HasOne("MusicManager.Server.Core.Model.Genre", "SongGenre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("MusicManager.Server.Core.Model.Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId");

                    b.HasOne("MusicManager.Server.Core.Model.User", "Artist")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MusicManager.Server.Core.Model.SongLyrics", b =>
                {
                    b.HasOne("MusicManager.Server.Core.Model.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");
                });
#pragma warning restore 612, 618
        }
    }
}
